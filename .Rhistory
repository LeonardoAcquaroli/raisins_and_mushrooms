subset(x=data, subset=Class==1)
ggplot(data[data$Class=='1'], aes(x = Area)) + geom_histogram()
ggplot(data[data$Class==1], aes(x = Area)) + geom_histogram()
data[data$Class==1]
ggplot(subset(x=data, subset=Class==1), aes(x = Area)) + geom_histogram()
ggplot(subset(x=data, subset=Class==0), aes(x = Area)) + geom_histogram()
ggplot() + geom_histogram(subset(x=data, subset=Class==0), aes(x = Area))
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1, aes(x = Area))
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area))
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area))
+ geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area))
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black')
+ geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow')
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5)
+ geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
hist_funct = function(column) {
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = column), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = column), fill='yellow', alpha = 0.5)
}
hist_funct('Area')
hist_funct(Area)
hist_funct = function(data, column) {
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = column), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = column), fill='yellow', alpha = 0.5)
}
hist_funct(data, Area)
hist_funct(data, 'Area')
View(data)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
getwd()
library(ggplot2)
data = read.csv('datasets/Raisin_Dataset.csv', header=TRUE, sep=";")
summary(data)
plot(data)
boxplot(data$Area)
boxplot(data$MajorAxisLength)
boxplot(data$MinorAxisLength)
boxplot(data$Eccentricity)
boxplot(data$ConvexArea)
boxplot(data$Extent)
boxplot(data$Perimeter)
boxplot(data$Class)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
library(ggplot2)
data = read.csv('datasets/Raisin_Dataset.csv', header=TRUE, sep=";")
summary(data)
plot(data)
boxplot(data$Area)
boxplot(data$MajorAxisLength)
boxplot(data$MinorAxisLength)
boxplot(data$Eccentricity)
boxplot(data$ConvexArea)
boxplot(data$Extent)
boxplot(data$Perimeter)
boxplot(data$Class)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
library(ggplot2)
data = read.csv('datasets/Raisin_Dataset.csv', header=TRUE, sep=";")
summary(data)
plot(data)
boxplot(data$Area)
boxplot(data$MajorAxisLength)
boxplot(data$MinorAxisLength)
boxplot(data$Eccentricity)
boxplot(data$ConvexArea)
boxplot(data$Extent)
boxplot(data$Perimeter)
boxplot(data$Class)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
library(ggplot2)
data = read.csv('datasets/Raisin_Dataset.csv', header=TRUE, sep=";")
summary(data)
plot(data)
boxplot(data$Area)
boxplot(data$MajorAxisLength)
boxplot(data$MinorAxisLength)
boxplot(data$Eccentricity)
boxplot(data$ConvexArea)
boxplot(data$Extent)
boxplot(data$Perimeter)
boxplot(data$Class)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
getwd()
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
install.packages('ggthemes')
install.packages('palmerpenguins')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_point()
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) + geom_point()
+ geom_point() + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species))
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(color = species) + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species)) + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm')
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species') +
scale_color_colorblind()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species') +
scale_color_colorblind()
ggplot(penguins, aes(x = species)) + geom_bar()
ggplot(penguins, aes(x = fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_infreq(-species))) + geom_bar()
ggplot(penguins, aes(x = -fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_rev(fct_infreq(species)))) + geom_bar()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, x = body_mass_g) + geom_histogram()
aes(
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) + geom_density()
ggplot(penguins, aes(x = species, y = body_mass_g)) + geom_boxplot()
ggplot(penguins, aes(x = body_mass_g, color = species)) + geom_density()
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density()
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density(linewidth = 0.75)
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5, linewidth = 0.75)
ggplot(penguins, aes(x = island, fill = species)) + geom_bar()
?geom_density
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island)) + facet_wrap(~island)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) + facet_wrap(~island)
ggplot(penguins aes = (x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
ggplot(penguins, aes = (x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
ggplot(penguins, aes = (x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
mpg
ggplot(mps, aes(x = displ, y = hwy, shape = drv)) + geom_smooth()
mpg
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + geom_smooth()
shape
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, )) + geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(aes(linetype = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_smooth(aes(group = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_scatter()
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), size = 3, color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red') +
geom_point(data = mpg |> filter(class == '2seater'), shape = 'circle open', size = 3, color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(drv~cyl)
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(~cyl)
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(drv~cyl)
library('tidyverse')
library('ggeasy')
library('pheatmap')
df = read.csv('winequalityN.csv')
summary(df)
head(df)
df$white = ifelse(df$type == 'white', 1, 0)
head(df)
table(df$type)
table(df$quality)
df = na.omit(df)
summary(df)
ggplot(df, aes(x = factor(quality))) + geom_bar(fill = 'orange') + xlab('Quality') + ylab('Total') + ggtitle('Distribution of Quality') + theme_classic() + ggeasy::easy_center_title()
cor_matrix = cor(df[, -1])
cor_matrix
heatmap(cor_matrix,
main = "Correlation Heatmap",
symm = TRUE,
scale = "none",
Colv = NA, Rowv = NA,
margins = c(10, 10))
plot(df)
lm.fit = lm(df$quality ∼ df$wine)
lm.fit = lm(df$quality ∼ df$white)
lm.fit = lm(df$quality ~ df$white)
lm.fit
lm.fit = lm(quality ~ white, data = df)
lm.fit
lm(quality ~ white, data = df)
summary(lm.fit)
lm.fit = lm(quality ~ white, data = df)
summary(lm.fit)
lm.fit = lm(quality ~ white + sulphates, data = df)
summary(lm.fit)
lm.fit = lm(quality ~ ., data = df)
summary(lm.fit)
lm.fit = lm(wine ~ . - white, data = df)
lm.fit = lm(typewine ~ . - white, data = df)
lm.fit = lm(typewhite ~ . - white, data = df)
lm.fit = lm(type ~ . - white, data = df)
lm.fit = lm(white ~ . - type, data = df)
summary(lm.fit)
lm.fit(4)
lm.fit(4, 4)
lm.fit[4]
glm.fit = glm.fit(white ~ . - type, data = df)
glm.fits = glm(white ~ . - type, data = df)
summary(glm.fits)
glm.fits = glm(white ~ . - type, data = df, family = binomial)
summary(glm.fits)
summary(glm.fits)
library('tidyverse')
library('ggeasy')
library('pheatmap')
df = read.csv('winequalityN.csv')
summary(df)
head(df)
df$white = ifelse(df$type == 'white', 1, 0)
head(df)
table(df$type)
table(df$quality)
df = na.omit(df)
summary(df)
ggplot(df, aes(x = factor(quality))) + geom_bar(fill = 'orange') + xlab('Quality') + ylab('Total') + ggtitle('Distribution of Quality') + theme_classic() + ggeasy::easy_center_title()
cor_matrix = cor(df[, -1])
cor_matrix
heatmap(cor_matrix,
main = "Correlation Heatmap",
symm = TRUE,
scale = "none",
Colv = NA, Rowv = NA,
margins = c(10, 10))
plot(df)
lm.fit = lm(white ~ . - type, data = df)
summary(lm.fit)
glm.fits = glm(white ~ . - type, data = df, family = binomial)
summary(glm.fits)
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar()
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species') +
scale_color_colorblind()
ggplot(penguins, aes(x = fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_rev(fct_infreq(species)))) + geom_bar()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) + geom_density()
ggplot(penguins, aes(x = species, y = body_mass_g)) + geom_boxplot()
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = island, fill = species)) + geom_bar()
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) + facet_wrap(~island)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
mpg
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(aes(linetype = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_smooth(aes(group = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red') +
geom_point(data = mpg |> filter(class == '2seater'), shape = 'circle open', size = 3, color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(~cyl)
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(drv~cyl)
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar()
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'identity')
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'identity', alpha = 0.2)
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'fill')
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar()
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'dodge')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
?geom_position
?geom_point
library(tidyverse)
library(scales)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
library(patchwork)
install.packages("patchwork")
library(patchwork)
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + geom_smooth(se = FALSE)
ggplot(df, aes(x, y)) + geom_point() + labs(x = quote(x[i]), y = quote(x[i]^2))
df = tibble(
x = 1:10,
y = cumsum(x^2)
)
ggplot(df, aes(x, y)) + geom_point() + labs(x = quote(x[i]), y = quote(x[i]^2))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red') +
geom_point(data = mpg |> filter(class == '2seater'), shape = 'circle open', size = 3, color = 'red')
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
data = read.csv('datasets/Raisin_Dataset.csv', sep = ';')
df = data[-c(8, 9)]
pr.out = prcomp(df, scale = TRUE)
pr.out
plot(pr.out$rotation[,1:2], main="Loadings plot",
xlab="PC1",ylab="PC2", xlim=range(-1,1))
abline(v=0,h=0,col="red")
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out$x), pos = 3)
df
setwd('C:/Users/Davide/Desktop/GitHub/raisins_and_mushrooms')
data = read.csv('datasets/Raisin_Dataset.csv', sep = ';')
df = data[-c(8, 9)]
df
pr.out = prcomp(df, scale = TRUE)
pr.out
pr.out[[1]]
pr.out[[2]]
pr.out[[3]]
pr.out[[4]]
pr.out[[5]]
plot(pr.out$rotation[,1:2], main="Loadings plot",
xlab="PC1",ylab="PC2", xlim=range(-1,1))
abline(v=0,h=0,col="red")
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1], pr.out$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
biplot(pr.out)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out$x), pos = 3)
class(pr.out[[2]])
pr.out[[2]][1]
pr.out[[2]][2]
rownames(pr.out[[2]])
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 3)
pr.out[[2]]
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 6)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 3)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 2)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 1)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 0)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = -1)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 1)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 1.5)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 2)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = rownames(pr.out[[2]]), pos = 3)
summary(pr.out)
summary(df)
for (column in df) {
print(column, mean(df['column']), var(df['column']))
}
for (column in df) {
print(column, mean(df$column]), var(df$column))
for (column in df) {
print(column, mean(df$column), var(df$column))
}
for (column in df) {
print(column)#, mean(df$column), var(df$column))
}
for (i in 1:ncol(df)) {
print(column)#, mean(df$column), var(df$column))
}
for (i in 1:ncol(df)) {
print(colnames(df[i])), mean(df$1), var(df$1))
for (i in 1:ncol(df)) {
print(colnames(df[i]), mean(df$1), var(df$1))
for (i in 1:ncol(df)) {
print(colnames(df[i]), mean(df$i), var(df$i))
}
for (i in 1:ncol(df)) {
print(colnames(df[i]))#, mean(df$i), var(df$i))
}
for (i in 1:ncol(df)) {
print(colnames(df[i]), mean(df[i]), var(df[i]))
}
for (i in 1:ncol(df)) {
print(colnames(df[i]),
print(mean(df[i])),
print(var(df[i])))
}
apply(df, mean, 2)
apply(df, 2, mean)
apply(df, 2, (mean, var))
apply(df, 2, c(mean, var))
apply(df, 2, mean); apply(df, 2, var)
apply(df, 2, mean)#; apply(df, 2, var)
mean(df$Area)
format((apply(df, 2, mean)), scientific = FALSE)#; apply(df, 2, var)
round((apply(df, 2, mean)), digits = 5)#; apply(df, 2, var)
round((apply(df, 2, mean)), digits = 5); round((apply(df, 2, var)), digits = 5)
round((apply(df, 2, mean)), digits = 5); round((apply(df, 2, var)), digits = 3)
round((apply(df, 2, mean)), digits = 5); apply(df, 2, var)
round((apply(df, 2, mean)), digits = 5); round((apply(df, 2, var)), digits = 9)
round((apply(df, 2, mean)), digits = 5); round((apply(df, 2, var)), digits = 0)
round((apply(df, 2, mean)), digits = 5); round((apply(df, 2, var)), digits = 1)
round((apply(df, 2, mean)), digits = 5); round((apply(df, 2, var)), digits = 2)
apply(df, 2, var)
options(scipen = 10)
round((apply(df, 2, mean)), digits = 5); round((apply(df, 2, var)), digits = 5)
summary(df)
