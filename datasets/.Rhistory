boxplot(data$Area)
boxplot(data$MajorAxisLength)
boxplot(data$MinorAxisLength)
boxplot(data$Eccentricity)
boxplot(data$ConvexArea)
boxplot(data$Extent)
boxplot(data$Perimeter)
boxplot(data$Class)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
library(ggplot2)
data = read.csv('datasets/Raisin_Dataset.csv', header=TRUE, sep=";")
summary(data)
plot(data)
boxplot(data$Area)
boxplot(data$MajorAxisLength)
boxplot(data$MinorAxisLength)
boxplot(data$Eccentricity)
boxplot(data$ConvexArea)
boxplot(data$Extent)
boxplot(data$Perimeter)
boxplot(data$Class)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
library(ggplot2)
data = read.csv('datasets/Raisin_Dataset.csv', header=TRUE, sep=";")
summary(data)
plot(data)
boxplot(data$Area)
boxplot(data$MajorAxisLength)
boxplot(data$MinorAxisLength)
boxplot(data$Eccentricity)
boxplot(data$ConvexArea)
boxplot(data$Extent)
boxplot(data$Perimeter)
boxplot(data$Class)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Area), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Area), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MajorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MajorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = MinorAxisLength), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = MinorAxisLength), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Eccentricity), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Eccentricity), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = ConvexArea), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = ConvexArea), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Extent), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Extent), fill='yellow', alpha = 0.5)
ggplot() + geom_histogram(data = subset(x=data, subset=Class==1), aes(x = Perimeter), fill = 'black', alpha = 0.5) + geom_histogram(data = subset(x=data, subset=Class==0), aes(x = Perimeter), fill='yellow', alpha = 0.5)
getwd()
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
install.packages('ggthemes')
install.packages('palmerpenguins')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_point()
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) + geom_point()
+ geom_point() + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species))
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(color = species) + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species)) + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm')
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species')
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species') +
scale_color_colorblind()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species') +
scale_color_colorblind()
ggplot(penguins, aes(x = species)) + geom_bar()
ggplot(penguins, aes(x = fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_infreq(-species))) + geom_bar()
ggplot(penguins, aes(x = -fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_rev(fct_infreq(species)))) + geom_bar()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, x = body_mass_g) + geom_histogram()
aes(
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) + geom_density()
ggplot(penguins, aes(x = species, y = body_mass_g)) + geom_boxplot()
ggplot(penguins, aes(x = body_mass_g, color = species)) + geom_density()
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density()
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density(linewidth = 0.75)
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5, linewidth = 0.75)
ggplot(penguins, aes(x = island, fill = species)) + geom_bar()
?geom_density
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island)) + facet_wrap(~island)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) + facet_wrap(~island)
ggplot(penguins aes = (x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
ggplot(penguins, aes = (x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
ggplot(penguins, aes = (x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
mpg
ggplot(mps, aes(x = displ, y = hwy, shape = drv)) + geom_smooth()
mpg
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + geom_smooth()
shape
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, )) + geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(aes(linetype = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_smooth(aes(group = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_scatter()
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), size = 3, color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red') +
geom_point(data = mpg |> filter(class == '2seater'), shape = 'circle open', size = 3, color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(drv~cyl)
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(~cyl)
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(drv~cyl)
library('tidyverse')
library('ggeasy')
library('pheatmap')
df = read.csv('winequalityN.csv')
summary(df)
head(df)
df$white = ifelse(df$type == 'white', 1, 0)
head(df)
table(df$type)
table(df$quality)
df = na.omit(df)
summary(df)
ggplot(df, aes(x = factor(quality))) + geom_bar(fill = 'orange') + xlab('Quality') + ylab('Total') + ggtitle('Distribution of Quality') + theme_classic() + ggeasy::easy_center_title()
cor_matrix = cor(df[, -1])
cor_matrix
heatmap(cor_matrix,
main = "Correlation Heatmap",
symm = TRUE,
scale = "none",
Colv = NA, Rowv = NA,
margins = c(10, 10))
plot(df)
lm.fit = lm(df$quality ∼ df$wine)
lm.fit = lm(df$quality ∼ df$white)
lm.fit = lm(df$quality ~ df$white)
lm.fit
lm.fit = lm(quality ~ white, data = df)
lm.fit
lm(quality ~ white, data = df)
summary(lm.fit)
lm.fit = lm(quality ~ white, data = df)
summary(lm.fit)
lm.fit = lm(quality ~ white + sulphates, data = df)
summary(lm.fit)
lm.fit = lm(quality ~ ., data = df)
summary(lm.fit)
lm.fit = lm(wine ~ . - white, data = df)
lm.fit = lm(typewine ~ . - white, data = df)
lm.fit = lm(typewhite ~ . - white, data = df)
lm.fit = lm(type ~ . - white, data = df)
lm.fit = lm(white ~ . - type, data = df)
summary(lm.fit)
lm.fit(4)
lm.fit(4, 4)
lm.fit[4]
glm.fit = glm.fit(white ~ . - type, data = df)
glm.fits = glm(white ~ . - type, data = df)
summary(glm.fits)
glm.fits = glm(white ~ . - type, data = df, family = binomial)
summary(glm.fits)
summary(glm.fits)
library('tidyverse')
library('ggeasy')
library('pheatmap')
df = read.csv('winequalityN.csv')
summary(df)
head(df)
df$white = ifelse(df$type == 'white', 1, 0)
head(df)
table(df$type)
table(df$quality)
df = na.omit(df)
summary(df)
ggplot(df, aes(x = factor(quality))) + geom_bar(fill = 'orange') + xlab('Quality') + ylab('Total') + ggtitle('Distribution of Quality') + theme_classic() + ggeasy::easy_center_title()
cor_matrix = cor(df[, -1])
cor_matrix
heatmap(cor_matrix,
main = "Correlation Heatmap",
symm = TRUE,
scale = "none",
Colv = NA, Rowv = NA,
margins = c(10, 10))
plot(df)
lm.fit = lm(white ~ . - type, data = df)
summary(lm.fit)
glm.fits = glm(white ~ . - type, data = df, family = binomial)
summary(glm.fits)
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar()
library('tidyverse')
library('ggthemes')
library('palmerpenguins')
glimpse(penguins)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) + geom_smooth(method = 'lm') +
labs(title = 'Body mass and flipper length',
subtitle = 'Dimensions for Adelie, Chinstrap and Gentoo Penguins',
x = 'Flipper lenght (mm)', y = 'Body mass (g)', color = 'Species', shape = 'Species') +
scale_color_colorblind()
ggplot(penguins, aes(x = fct_infreq(species))) + geom_bar()
ggplot(penguins, aes(x = fct_rev(fct_infreq(species)))) + geom_bar()
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) + geom_density()
ggplot(penguins, aes(x = species, y = body_mass_g)) + geom_boxplot()
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = island, fill = species)) + geom_bar()
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = 'fill')
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) + facet_wrap(~island)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, alpha = bill_length_mm)) + geom_point()
mpg
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(aes(linetype = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_smooth(aes(group = drv))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red') +
geom_point(data = mpg |> filter(class == '2seater'), shape = 'circle open', size = 3, color = 'red')
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(~cyl)
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() + facet_wrap(drv~cyl)
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar()
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'identity')
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'identity', alpha = 0.2)
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'fill')
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar()
ggplot(mpg, aes(x = drv, fill = class)) + geom_bar(position = 'dodge')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(position = 'jitter')
?geom_position
?geom_point
library(tidyverse)
library(scales)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
library(patchwork)
install.packages("patchwork")
library(patchwork)
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + geom_smooth(se = FALSE)
ggplot(df, aes(x, y)) + geom_point() + labs(x = quote(x[i]), y = quote(x[i]^2))
df = tibble(
x = 1:10,
y = cumsum(x^2)
)
ggplot(df, aes(x, y)) + geom_point() + labs(x = quote(x[i]), y = quote(x[i]^2))
ggplot(mpg, aes(x =displ, y = hwy)) + geom_point() +
geom_point(data = mpg |> filter(class == '2seater'), color = 'red') +
geom_point(data = mpg |> filter(class == '2seater'), shape = 'circle open', size = 3, color = 'red')
data = read.csv('datasets/Raisin_Dataset')
getwd()
setwd('C:/Users/Davide/Desktop/GitHub/raisins_and_mushrooms/datasets')
data = read.csv('datasets/Raisin_Dataset')
data = read.csv('datasets/Raisin_Dataset.csv', sep = ';')
df = data[-c(8, 9)]
data = read.csv('datasets/Raisin_Dataset.csv', sep = ';')
df = data[-c(8, 9)]
df
pr.out = prcomp(df, scale = TRUE)
pr.out
plot(pr.out[,1:2], main="Loadings plot",
xlab="PC1",ylab="PC2", xlim=range(-1,1))
plot(pr.out$rotation[,1:2], main="Loadings plot",
xlab="PC1",ylab="PC2", xlim=range(-1,1))
text(comp, rownames(comp))
plot(pr.out$rotation[,1:2], main="Loadings plot",
xlab="PC1",ylab="PC2", xlim=range(-1,1))
abline(v=0,h=0,col="red")
plot(pr.out$rotation[,1:2], main="Loadings plot",
xlab="PC1",ylab="PC2", xlim=range(-1,1))
library(stats)
# Generate example data
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a biplot without labels
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
points(pca$x[, 1], pca$x[, 2], col = "red", pch = 16)  # Plot scores as points
data
plot(pc.out$x[, 1], pc.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
arrows(0, 0, pr.out$rotation[, 1], pr.out$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
points(pr.out$x[, 1], pr.out$x[, 2], col = "red", pch = 16)  # Plot scores as points
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
arrows(0, 0, pr.out$rotation[, 1], pr.out$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
points(pr.out$x[, 1], pr.out$x[, 2], col = "red", pch = 16, alpha = 0.5)  # Plot scores as points
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
arrows(0, 0, pr.out$rotation[, 1], pr.out$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1], pr.out$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a bivariate plot with dimensions of arrows and points on axes
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "PC1 (Points)", ylab = "PC2 (Points)")  # Create an empty plot with point dimensions
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")  # Plot loadings as arrows with arrow dimensions
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as transparent points with point dimensions
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "PC1 (Points)", ylab = "PC2 (Points)")  # Create an empty plot with point dimensions
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")  # Plot loadings as arrows with arrow dimensions
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as transparent points with point dimensions
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as transparent points
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
# Generate example data
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a bivariate plot showing both arrow and point dimensions on axes
biplot(pca, xlabs = "", ylabs = "", cex = 0)  # Plot biplot without labels and with zero expansion
# Generate example data
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a bivariate plot showing both arrow and point dimensions on axes
biplot(pca, xlabs = rep("", ncol(data)), ylabs = rep("", nrow(data)), cex = 0)  # Plot biplot without labels and with zero expansion
# Generate example data
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a bivariate plot showing both arrow and point dimensions on axes
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "PC1 (Points)", ylab = "PC2 (Points)")
# Add custom labels for arrow and point dimensions on the axes
with(pca, {
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")
text(pca$rotation[, 1], pca$rotation[, 2], labels = colnames(data), pos = 3)
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)
text(pca$x[, 1], pca$x[, 2], labels = rownames(data), pos = 3)
})
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create separate plots for arrows and points
plot(pca$rotation[, 1], pca$rotation[, 2], type = "n", xlab = "Arrow Dimension 1", ylab = "Arrow Dimension 2")
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")
text(pca$rotation[, 1], pca$rotation[, 2], labels = colnames(data), pos = 3)
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "Point Dimension 1", ylab = "Point Dimension 2")
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)
text(pca$x[, 1], pca$x[, 2], labels = rownames(data), pos = 3)
# Combine the plots
par(mfrow = c(1, 2))  # Set the layout to have two plots side by side
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create separate plots for arrows and points
plot(pca$rotation[, 1], pca$rotation[, 2], type = "n", xlab = "Arrow Dimension 1", ylab = "Arrow Dimension 2")
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")
text(pca$rotation[, 1], pca$rotation[, 2], labels = colnames(data), pos = 3)
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "Point Dimension 1", ylab = "Point Dimension 2")
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)
text(pca$x[, 1], pca$x[, 2], labels = rownames(data), pos = 3)
# Combine the plots
par(mfrow = c(1, 2))  # Set the layout to have two plots side by side
# Generate example data
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a bivariate plot showing both arrow and point dimensions on separate axes
plot(pca$rotation[, 1], pca$rotation[, 2], type = "n", xlab = "Arrow Dimension 1", ylab = "Arrow Dimension 2", xlim = c(-1, 1), ylim = c(-1, 1))
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")
text(pca$rotation[, 1], pca$rotation[, 2], labels = colnames(data), pos = 3)
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "Point Dimension 1", ylab = "Point Dimension 2", xlim = c(-3, 3), ylim = c(-3, 3))
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)
text(pca$x[, 1], pca$x[, 2], labels = rownames(data), pos = 3)
# Generate example data
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a bivariate plot showing both arrow and point dimensions on separate axes
plot(pca$rotation[, 1], pca$rotation[, 2], type = "n", xlab = "Arrow Dimension 1", ylab = "Arrow Dimension 2", xlim = c(-1, 1), ylim = c(-1, 1))
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")
text(pca$rotation[, 1], pca$rotation[, 2], labels = colnames(data), pos = 3)
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "Point Dimension 1", ylab = "Point Dimension 2", xlim = c(-3, 3), ylim = c(-3, 3))
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)
text(pca$x[, 1], pca$x[, 2], labels = rownames(data), pos = 3)
data <- iris[, 1:4]  # Consider only the numeric variables
# Perform Principal Component Analysis (PCA)
pca <- prcomp(data, scale. = TRUE)
# Create a bivariate plot with arrows overlaid on points
biplot(pca, scale = 0, xlabs = "", ylabs = "")  # Plot biplot without rescaling or labels
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1], pr.out$rotation[, 2], length = 0.1, angle = 30)  # Plot loadings as arrows
plot(pca$x[, 1], pca$x[, 2], type = "n", xlab = "PC1 (Points)", ylab = "PC2 (Points)")  # Create an empty plot with point dimensions
arrows(0, 0, pca$rotation[, 1], pca$rotation[, 2], length = 0.1, angle = 30, col = "blue")  # Plot loadings as arrows with arrow dimensions
points(pca$x[, 1], pca$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as transparent points with point dimensions
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = 0)
acp <- princomp(USArrests, cor = TRUE)
biplot(acp)
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = )
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = 0)
biplot(acp, cex = None)
?biplot
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = c(0,0))
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = 0)
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = 0, xlabs = "", ylabs = "")
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = 0, xlabs = NULL, ylabs = NULL)
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, xlabs = NULL, ylabs = NULL)
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = 0, xlabs = rep("", ncol(USArrests)), ylabs = rep("", nrow(USArrests)))
acp <- princomp(USArrests, cor = TRUE)
# Plot the biplot without labels
plot(acp$scores[, 1], acp$scores[, 2], type = "n", xlab = "PC1", ylab = "PC2", xlim = c(-3, 3), ylim = c(-3, 3))
arrows(0, 0, acp$loadings[, 1], acp$loadings[, 2], length = 0.1, angle = 30, col = "blue")
# Add points representing observations
points(acp$scores[, 1], acp$scores[, 2], col = "red", pch = 16)
acp <- princomp(USArrests, cor = TRUE)
biplot(acp, cex = 0, xlabs = colnames(USArrests), ylabs = NULL)
acp <- princomp(USArrests, cor = TRUE)
# Plot the biplot without labels on the y-axis
plot(acp$scores[, 1], acp$scores[, 2], type = "n", xlab = "PC1", ylab = "", xlim = c(-3, 3), ylim = c(-3, 3))
arrows(0, 0, acp$loadings[, 1], acp$loadings[, 2], length = 0.1, angle = 30, col = "blue")
# Add labels on the x-axis
axis(1, at = acp$scores[, 1], labels = rownames(USArrests))
# Add points representing observations
points(acp$scores[, 1], acp$scores[, 2], col = "red", pch = 16)
biplot(pr.out)
df
biplot(pr.out, xlabs = 1:900, ylabs = 1:900)
biplot(pr.out, df)
biplot(pr.out, xlabs = 1:900, ylabs = 1:900)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*30, pr.out$rotation[, 2]*30, length = 0.1, angle = 30)  # Plot loadings as arrows
biplot(pr.out)
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*10, pr.out$rotation[, 2]*10, length = 0.1, angle = 30)  # Plot loadings as arrows
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*9, pr.out$rotation[, 2]*9, length = 0.1, angle = 30)  # Plot loadings as arrows
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*8, pr.out$rotation[, 2]*8, length = 0.1, angle = 30)  # Plot loadings as arrows
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
plot(pr.out$x[, 1], pr.out$x[, 2], type = "n", xlab = "PC1", ylab = "PC2")  # Create an empty plot
points(pr.out$x[, 1], pr.out$x[, 2], col = rgb(1, 0, 0, alpha = 0.5), pch = 16)  # Plot scores as points
arrows(0, 0, pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, length = 0.1, angle = 30)  # Plot loadings as arrows
text(pr.out$rotation[, 1]*7, pr.out$rotation[, 2]*7, labels = colnames(pr.out$x), pos = 3)
